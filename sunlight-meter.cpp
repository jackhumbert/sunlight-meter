#include <stdint.h>
#include <stdlib.h>
#include <stdio.h>
#include <avr/pgmspace.h>
#include <avr/io.h>
#include <avr/interrupt.h>
#include "Framebuffer.h"
extern "C" {
	#include "analog.h"
}
const uint8_t image[] PROGMEM = {
0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0x07,0x01,0xc1,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xc7,0xc7,0xc7,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xc7,0xc7,0xc7,0xf9,0xd6,0xbe,0xdb,0xad,0xdb,0xb9,0xff,0xff,0xff,0xff,0xff
,0xff,0xc7,0xc7,0xc7,0xf6,0xaa,0xbd,0x55,0x55,0x55,0x57,0xff,0xff,0xff,0xff,0xff
,0xff,0xc7,0xc7,0xc7,0xf6,0xaa,0x7d,0xd7,0x55,0x51,0x73,0xff,0xff,0xff,0xff,0xff
,0xff,0xc7,0xc7,0xc7,0xf6,0xaa,0xbc,0xd7,0x55,0x55,0x77,0xff,0xff,0xff,0xff,0xff
,0xff,0xc7,0xc7,0xc7,0xf5,0xaa,0xbd,0xd7,0x55,0x55,0x77,0xff,0xff,0xff,0xff,0xff
,0xff,0xc7,0xc7,0xc7,0xfa,0xba,0xbd,0xd7,0x76,0xb5,0x79,0xff,0xff,0xff,0xff,0xff
,0xff,0xe7,0xc7,0xcf,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xe3,0xc7,0x8f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xf1,0xc7,0x1f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xfc,0x00,0x7f,0xfb,0xba,0xeb,0x5b,0x6d,0x7c,0xad,0xdd,0xdd,0xc9,0xff,0xff
,0xff,0xff,0xc7,0xff,0xf5,0x55,0x55,0x55,0x45,0x7b,0xaa,0xaa,0xa8,0xba,0xff,0xff
,0xff,0xff,0xc7,0xff,0xf7,0x55,0x55,0x55,0x6d,0x4d,0xaa,0xaa,0xbd,0x9a,0xff,0xff
,0xff,0xff,0xc7,0xff,0xf7,0x55,0x55,0x55,0x6d,0x7e,0xa9,0x9a,0xbd,0xba,0xff,0xff
,0xff,0xff,0xc7,0xff,0xf5,0x55,0x55,0x55,0x6d,0x7e,0xab,0xba,0xbd,0xba,0xff,0xff
,0xff,0xff,0xc7,0xff,0xfb,0xb7,0x5d,0xb5,0x76,0xf9,0xdb,0xbd,0xbe,0xc9,0xff,0xff
,0xff,0xff,0xc7,0xff,0xff,0xff,0xff,0xff,0xfd,0xff,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xff,0x01,0xff,0xff,0xff,0xff,0xff,0xfb,0xff,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff

};


uint16_t sunlight;
char sunlight_string[5], second_string[5], minute_string[5], hour_string[5], average_string[5];

Framebuffer fb;

uint16_t second_data[60];
uint16_t minute_data[60];
uint16_t hour_data[24];

uint8_t seconds, minutes, hours;
double sunlight_sum, hour_sum, minute_sum, second_sum, average_sunlight;

int main(void) {

    fb.drawBitmap(image,64,128,0,0);
    fb.show();

	DDRD |= (1<<6);
	PORTD |= (1<<6);

	sunlight = 0;
	seconds = 0;
	minutes = 0;
	hours = 0;

	cli();
	TCNT1 = 0x0000; // reset counter to 0 at start
	TCCR1A= 0b00000000; // turn off PWM
	TCCR1B= 0b00001100; // set CTC on and prescalar to /256
	TIMSK1 |= _BV(OCIE1A); // enable timer compare A interrupt
	OCR1A = 31249; //set the comparator A to trigger at 1 second
	sei();

    while (true) {
	}
    return 0;
}

ISR(TIMER1_COMPA_vect) {
	sunlight = analogRead(3);

	second_data[seconds] = sunlight;
	seconds++;
	if (seconds == 60) {
		sunlight_sum = 0;
		for (int i = 0; i < 60; i++) {
			sunlight_sum += second_data[i];
		}
		minute_data[minutes] = sunlight_sum / 60.0;
		minutes++;
	}
	if (minutes == 60) {
		sunlight_sum = 0;
		for (int i = 0; i < 60; i++) {
			sunlight_sum += minute_data[i];
		}
		hour_data[hours] = sunlight_sum / 60.0;
		hours++;
	}
	seconds %= 60;
	hours %= 24;
	minutes %= 60;

	hour_sum = 0;
	for (int i = 0; i < hours; i++) {
		hour_sum += hour_data[i];
	}
	minute_sum = 0;
	for (int i = 0; i < minutes; i++) {
		minute_sum += minute_data[i];
	}
	second_sum = 0;
	for (int i = 0; i < seconds; i++) {
		second_sum += second_data[i];
	}
	if (hours > 0) {
		hour_sum *= (59.0 / hours / 60.0);
		minute_sum *= (1.0/60.0);
		second_sum *= (1.0/60.0);
	}
	if (minutes > 0) {
		hour_sum *= (59.0/60.0);
		minute_sum *= (59.0 / minutes / 60.0);
		second_sum *= (1/60);
	}
	if (seconds > 0) {
		second_sum *= (1.0 / seconds);
	}
	average_sunlight = hour_sum + minute_sum + second_sum;

	fb.clear();
    fb.drawRectangle(0, 24, sunlight/8, 31, 1);
    fb.drawString("Current:", 0, 0);
    itoa(sunlight, sunlight_string, 10);
    sprintf(second_string, "%02d", seconds);
    sprintf(minute_string, "%02d", minutes);
    sprintf(hour_string, "%02d", hours);
    sprintf(average_string, "%.0f", average_sunlight);
    fb.drawString(sunlight_string, 6*9, 0);
    fb.drawString("  :  :   since start", 0, 8);
    fb.drawString(hour_string, 0, 8);
    fb.drawString(minute_string, 6*3, 8);
    fb.drawString(second_string, 6*6, 8);
    fb.drawString("Average:", 0, 16);
    fb.drawString(average_string, 6*9, 16);
    fb.show();
}